-- Á§∫„Åó„Åü„ÅÑÂÆöÁêÜ:R‰∏ä„ÅÆC^1Á¥öÈñ¢Êï∞„ÅØ„ÄÅR‰∏ä„Åßf„ÅØÂ±ÄÊâÄ„É™„Éó„Ç∑„ÉÉ„ÉÑÈÄ£Á∂ö„Åß„ÅÇ„Çã
import Mathlib.Analysis.Calculus.ContDiff.Basic
import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.Topology.MetricSpace.ProperSpace
import Mathlib.Analysis.Calculus.MeanValue -- Âπ≥ÂùáÂÄ§„ÅÆÂÆöÁêÜ
import Mathlib.Algebra.Order.Group.Abs
import Mathlib.Analysis.Normed.Module.Convex -- convex_closedBall
open Set Metric

theorem C1_implies_LocallyLipschitz
    -- f „ÅØÂÆüÊï∞„Åã„ÇâÂÆüÊï∞„Å∏„ÅÆÈñ¢Êï∞
    (f : ‚Ñù ‚Üí ‚Ñù)
    -- h_c1 „ÅØ f „ÅåC¬πÁ¥ö„Åß„ÅÇ„Çã„Å®„ÅÑ„ÅÜ‰ªÆÂÆö
    (h_c1 : ContDiff ‚Ñù 1 f) :
    -- ÁµêË´ñÔºöf „ÅØÂ±ÄÊâÄ„É™„Éó„Ç∑„ÉÉ„ÉÑÈÄ£Á∂ö„Åß„ÅÇ„Çã
    LocallyLipschitz f := by
    rw [LocallyLipschitz]
    -- x ‚àà ‚Ñù „Çí‰ªªÊÑè„Å´Âèñ„Çã
    intro x
    -- Goal: ‚àÉ K, ‚àÉ t ‚àà nhds x, LipschitzOnWith K f t
    -- LipschitzOnWith„Çí„Éê„É©„Åô
    -- Unfold the definition of LipschitzOnWith
    simp only [LipschitzOnWith]
    -- Goal: ‚àÉ K, ‚àÉ t ‚àà nhds x, ‚àÄ {x : ‚Ñù}, x ‚àà t ‚Üí ‚àÄ {y : ‚Ñù}, y ‚àà t ‚Üí dist (f x) (f y) ‚â§ ‚ÜëK * dist x y
    -- K: „É™„Éó„Ç∑„ÉÉ„ÉÑÂÆöÊï∞
    -- t‚àà nhds x „Å®„ÅØ: x„ÇíÂê´„ÇÄ‰Ωï„Çâ„Åã„ÅÆÈñãÈõÜÂêàt„ÅåË¶ã„Å§„Åã„Çã
    -- „Åì„Åì„Åß„ÄÅt„ÅØ„Å™„Çì„Åß„ÇÇ„ÅÑ„ÅÑ„Çì„Å†„Åë„Å©„ÄÅ„Å®„Çä„ÅÇ„Åà„Åö(x-1,x+1)„Å´„Åó„Å®„Åè
    -- „Å®„Åä„ÇÇ„Å£„Åü„ÇÇ„ÅÆ„ÅÆ„ÄÅt„ÇíÈñãÂå∫Èñì„Å´„Åó„Å¶„ÄÅK=sup_t |f'|„Å®„Åô„Çã„Å®„ÄÅsup_t |f'|„ÅåÂ≠òÂú®„Åô„Çã„Å®„ÅØÈôê„Çâ„Å™„ÅÑ
    -- (f'„ÅåÊúâÁïå„Å®„ÅØÈôê„Çâ„Å™„ÅÑ„ÅÆ„Åß„ÄÇ)
    let t := Metric.closedBall x 1
    have h_nhds : t ‚àà nhds x := by
      rw [Metric.mem_nhds_iff]
      -- Goal: ‚àÉ Œµ > 0, ball x Œµ ‚äÜ t
      simp [t]
      use 0.5
      constructor
      ¬∑ linarith
      ¬∑
        intro y hy
        -- goal: y ‚àà closedBall x 1
        rw [Metric.mem_closedBall]
        -- hy: y ‚àà ball x 0.5
        rw [Metric.mem_ball] at hy
        -- hy: dist y x < 0.5
        -- goal: dist y x ‚â§ 1
        linarith

    have h_t_is_compact : IsCompact t := by
      -- closedBall„ÅØ„Ç≥„É≥„Éë„ÇØ„Éà
      -- Mathlib.Topology.MetricSpace.ProperSpace „ÅßË®ºÊòé„Åï„Çå„Å¶„ÅÑ„Çã
      exact isCompact_closedBall x 1

    have h_t_is_convex : Convex ‚Ñù t := by
      exact convex_closedBall x 1


     -- „Ç≥„É≥„Éë„ÇØ„ÉàÈõÜÂêà t ‰∏ä„ÅÆÈÄ£Á∂öÈñ¢Êï∞ ‚Äñderiv f y‚Äñ „ÅÆÂÄ§„ÅÆÈõÜÂêà„Çí s „Å®„Åä„Åè
    let s := (fun y => ‚Äñderiv f y‚Äñ) '' t
    -- „Åù„ÅÆÈõÜÂêà„ÅÆ‰∏äÈôê (supremum) „Çí K „Å®„Åô„Çã„ÄÇ
    -- „Ç≥„É≥„Éë„ÇØ„ÉàÈõÜÂêà‰∏ä„ÅÆÈÄ£Á∂öÈñ¢Êï∞„ÅØÊúâÁïå„Å™„ÅÆ„Åß„ÄÅ„Åì„ÅÆ K „ÅØÊúâÈôê„ÅÆÂÄ§„Å®„Å™„Çã„ÄÇ
    let K := sSup s
    -- ÊßãÊàê„Åô„ÇãK„ÅØNNReal(ÈùûË≤†Êï¥Êï∞)„Å™„ÅÆ„Åß,„Åì„ÅÆK„ÇíNNReal„Å´Â§âÊèõ„Åô„Çã
    let K_nn : NNReal := ‚ü®K, by
    -- K„ÅåÈùûË≤†„Åß„ÅÇ„Çã„Åì„Å®„ÅÆË®ºÊòé
    apply Real.sSup_nonneg
    -- ÈõÜÂêàs„ÅÆÂÖÉ„Åå„Åô„Åπ„Å¶ÈùûË≤†„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ§∫„Åô
    rintro _ ‚ü®y, _, rfl‚ü©
    exact norm_nonneg _
    ‚ü©

    use K_nn -- ‚àÉ „ÇíË®ºÊòé„Åô„Çã„Åü„ÇÅ„Å´ÊßãÊàê
    use t -- ‚àÉ „ÇíË®ºÊòé„Åô„Çã„Åü„ÇÅ„Å´ÊßãÊàê
    use h_nhds
    -- Goal: ‚àÄ {x : ‚Ñù}, x ‚àà t ‚Üí ‚àÄ {y : ‚Ñù}, y ‚àà t ‚Üí dist (f x) (f y) ‚â§ ‚ÜëK_nn * dist x y
    intro x1 hx1
    intro y1 hy1

    let x2 := min x1 y1
    let y2 := max x1 y1

    -- Goal: edist (f x1) (f y1) ‚â§ ‚ÜëK_nn * edist x1 y1
    -- Âπ≥ÂùáÂÄ§„ÅÆÂÆöÁêÜ„ÅØMathlib„Å´„ÅÇ„Çã
     -- f„ÅåÂå∫Èñì [x2,y2] „ÅßÂæÆÂàÜÂèØËÉΩ„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ§∫„Åô„ÄÇC¬πÁ¥ö„Å™„ÅÆ„ÅßÂΩìÁÑ∂Êàê„ÇäÁ´ã„Å§„ÄÇ
    -- We will use differentiability everywhere from C¬π
    have h_diff_at : ‚àÄ z ‚àà Icc x2 y2, DifferentiableAt ‚Ñù f z := by
      intro z hz
      exact (ContDiff.differentiable h_c1 (by norm_num)).differentiableAt

    -- Âπ≥ÂùáÂÄ§„ÅÆÂÆöÁêÜÔºà„ÅÆ‰∏çÁ≠âÂºèÁâàÔºâ„ÇíÈÅ©Áî®„Åó„Å¶„ÄÅGoal„ÇíÁõ¥Êé•Ë®ºÊòé„Åô„Çã
    /-
    /-- The mean value theorem on a convex set in dimension 1: if the derivative of a function within
    this set is bounded by `C`, then the function is `C`-Lipschitz. Version with `derivWithin` -/
    theorem norm_image_sub_le_of_norm_derivWithin_le {C : ‚Ñù} (hf : DifferentiableOn ùïú f s)
        (bound : ‚àÄ x ‚àà s, ‚ÄñderivWithin f s x‚Äñ ‚â§ C) (hs : Convex ‚Ñù s) (xs : x ‚àà s) (ys : y ‚àà s) :
        ‚Äñf y - f x‚Äñ ‚â§ C * ‚Äñy - x‚Äñ :=
      hs.norm_image_sub_le_of_norm_hasDerivWithin_le (fun x hx => (hf x hx).hasDerivWithinAt) bound xs
        ys
    -/
    -- ‰∏ä„ÅÆÂÆöÁêÜ„ÅÆÊñáÂ≠ó : „Åì„ÅÆ„Ç≥„Éº„Éâ„Åß„ÅÆÊñáÂ≠ó
    -- ùïÇ : ‚Ñù
    -- f : f
    -- s : Icc x1 y1
    -- C : K

    -- First, show the interval lies inside the closed ball t, since t is convex and contains x1, y1.
    have h_Icc_subset_t : Icc x2 y2 ‚äÜ t := by
      have hseg : segment ‚Ñù x1 y1 ‚äÜ t := h_t_is_convex.segment_subset hx1 hy1
      by_cases h : x1 ‚â§ y1
      ¬∑ -- then x2 = x1, y2 = y1
        have hseg_eq : segment ‚Ñù x1 y1 = Icc x2 y2 := by
          simp [segment_eq_Icc, x2, y2, h]
        simpa [hseg_eq]
          using hseg
      ¬∑ -- y1 ‚â§ x1
        have h' : y1 ‚â§ x1 := le_of_lt (lt_of_not_ge h)
        have hx2 : x2 = y1 := by simp [x2, h']
        have hy2 : y2 = x1 := by simp [y2, h']
        have hseg_eq : segment ‚Ñù x1 y1 = Icc x2 y2 := by
          -- use symmetry of segment
          have : segment ‚Ñù y1 x1 = Icc x2 y2 := by
            simp [segment_eq_Icc, hx2, hy2, h']
          simpa [segment_symm] using this
        simpa [hseg_eq] using hseg

    -- Show the image s is nonempty and bounded above, as image of a compact set by a continuous function
    have hx_mem_t : x ‚àà t := by
      -- x is the center of the closed ball of radius 1
      simp [t, Metric.mem_closedBall, dist_self]
    have hs_nonempty : s.Nonempty := ‚ü®‚Äñderiv f x‚Äñ, ‚ü®x, hx_mem_t, rfl‚ü©‚ü©
    have hcont_deriv : Continuous fun y => deriv f y :=
      (h_c1.continuous_deriv (le_rfl))
    have hcont_norm : Continuous fun y => ‚Äñderiv f y‚Äñ := hcont_deriv.norm
    have hcompact_s : IsCompact s :=
      (h_t_is_compact.image hcont_norm)
    have hbdd : BddAbove s := hcompact_s.bddAbove

    -- Now bound the derivative on the interval by K = sSup s
    have h_bound' : ‚àÄ z ‚àà (Icc x2 y2), ‚Äñderiv f z‚Äñ ‚â§ K := by
      intro z hz
      have hz_t : z ‚àà t := h_Icc_subset_t hz
      have hz_in_s : ‚Äñderiv f z‚Äñ ‚àà s := ‚ü®z, hz_t, rfl‚ü©
      exact le_csSup hbdd hz_in_s

    have h_convex_set : Convex ‚Ñù (Icc x2 y2) := by
      exact convex_Icc x2 y2

    have h_xs: x2 ‚àà (Icc x2 y2) := by
      simp_all
      simp [x2]
      simp [y2]

    have h_ys: y2 ‚àà (Icc x2 y2) := by
      simp [x2, y2]

    have h_final : ‚Äñf y2 - f x2‚Äñ ‚â§ K * ‚Äñy2 - x2‚Äñ := by
      -- Mean value inequality on a convex set using the bound on the ordinary derivative
      exact h_convex_set.norm_image_sub_le_of_norm_deriv_le h_diff_at h_bound' h_xs h_ys


    -- Finish by rewriting to norms using `dist_eq_norm` and using the mean value inequality above.
    have hxy_norm : ‚Äñf x1 - f y1‚Äñ ‚â§ K * ‚Äñx1 - y1‚Äñ := by
      by_cases hle : x1 ‚â§ y1
      ¬∑ have hx2 : x2 = x1 := by simp [x2, hle]
        have hy2 : y2 = y1 := by simp [y2, hle]
        -- h_final currently reads with arguments (y2, x2)
        -- Adjust order on the left using `norm_sub_rev`.
        simpa [hx2, hy2, norm_sub_rev] using h_final
      ¬∑ have hle' : y1 ‚â§ x1 := le_of_lt (lt_of_not_ge hle)
        have hx2 : x2 = y1 := by simp [x2, hle']
        have hy2 : y2 = x1 := by simp [y2, hle']
        simpa [hx2, hy2] using h_final
    -- Finish: turn norms into distances, then to extended distances.
    have hxy_dist : dist (f x1) (f y1) ‚â§ K * dist x1 y1 := by
      simpa [dist_eq_norm] using hxy_norm
    have hxy_edist : ENNReal.ofReal (dist (f x1) (f y1))
        ‚â§ ENNReal.ofReal (K * dist x1 y1) := ENNReal.ofReal_le_ofReal hxy_dist
    -- Rewrite the right-hand side to match the goal


    have hxy_edist2 : PseudoMetricSpace.edist (f x1) (f y1)
        ‚â§ ‚ÜëK_nn * PseudoMetricSpace.edist x1 y1 := by
        simp [PseudoMetricSpace.edist]
        -- goal: ‚Üë‚ü®|f x1 - f y1|‚ü© ‚â§ ‚ÜëK_nn * ‚Üë‚ü®|x1 - y1|‚ü©


        sorry

    simpa [edist, ENNReal.ofReal_mul, dist_eq_norm, K_nn] using hxy_edist2
